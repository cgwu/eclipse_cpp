# region Using Directives

using System;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.ComponentModel;
using System.Windows.Media;
using System.Windows.Interop;
using System.Threading;

# endregion

namespace Assergs.Windows
{
	// WindowState: Normal Maximized Minimized
	// WindowStartupLocation Manual CenterOwner CenterScreen

	[TemplatePart(Name = ToolWindow.PART_Dragger, Type = typeof(UIElement))]
	[TemplatePart(Name = ToolWindow.PART_ResizeGrip, Type = typeof(ResizeGrip))]
	public class ToolWindow : HeaderedContentControl
	{
		# region Declarations

		internal const string PART_Dragger = "PART_Dragger";
		private UIElement _PART_Dragger_Element;
		internal const string PART_ResizeGrip = "PART_ResizeGrip";
		private ResizeGrip _PART_ResizeGrip_Element;
		private DragOrResizeStatus _PreviewDragOrResizeStatus;
		private DragOrResizeStatus _DragOrResizeStatus;
		private Point _StartMousePosition;
		private Point _PreviousMousePosition;

		public static RoutedCommand CloseCommand;

		# endregion

		# region Static Constructor

		static ToolWindow()
		{
			ToolWindow.DefaultStyleKeyProperty.OverrideMetadata(typeof(ToolWindow),
				new FrameworkPropertyMetadata(typeof(ToolWindow)));

			//InputGestureCollection fooInputs = new InputGestureCollection();
			//fooInputs.Add(new KeyGesture(Key.F, ModifierKeys.Control | ModifierKeys.Shift));
			ToolWindow.CloseCommand = new RoutedCommand("Close", typeof(ToolWindow)); //, fooInputs);
			CommandBinding commandBinding = new CommandBinding(
				ToolWindow.CloseCommand, ToolWindow.ExecutedCloseCommand);
			CommandManager.RegisterClassCommandBinding(typeof(ToolWindow), commandBinding);

			Control.IsTabStopProperty.OverrideMetadata(typeof(ToolWindow),
				new FrameworkPropertyMetadata(false));
			KeyboardNavigation.DirectionalNavigationProperty.OverrideMetadata(
				typeof(ToolWindow), new FrameworkPropertyMetadata(KeyboardNavigationMode.Cycle));

			if (BrowserInteropHelper.IsBrowserHosted)
			{
				KeyboardNavigation.TabNavigationProperty.OverrideMetadata(
				typeof(ToolWindow), new FrameworkPropertyMetadata(KeyboardNavigationMode.Local));
			}
			else
			{
				KeyboardNavigation.TabNavigationProperty.OverrideMetadata(
				typeof(ToolWindow), new FrameworkPropertyMetadata(KeyboardNavigationMode.Cycle));

				KeyboardNavigation.ControlTabNavigationProperty.OverrideMetadata(
				typeof(ToolWindow), new FrameworkPropertyMetadata(KeyboardNavigationMode.Once));
			}

			FocusManager.IsFocusScopeProperty.OverrideMetadata(
				typeof(ToolWindow), new FrameworkPropertyMetadata(true));
		}

		# endregion

		# region Constructor

		public ToolWindow()
		{
			this._DragOrResizeStatus = DragOrResizeStatus.None;
			this._StartMousePosition = new Point();

			EventManager.RegisterClassHandler(typeof(ToolWindow), ToolWindow.ActivatedEvent,
				new RoutedEventHandler(this.ToolWindow_Activated));
		}

		# endregion

		# region Properties

		# region Parent

		public new ToolWindowDockPanel Parent
		{
			get
			{
				//return (ToolWindowDockPanel)base.Parent;
                return (ToolWindowDockPanel)base.Parent;
			}
			//    set
			//    {
			//        if (this._Parent == null || value != this.Parent)
			//        {
			//            if (this._Parent != null)
			//            {
			//                this._Parent.Children.Remove(this);
			//            }

			//            if (!value.Children.Contains(this))
			//            {
			//                value.Children.Add(this);
			//            }

			//            this._Parent = value;
			//        }
			//    }
		}

		# endregion

		# region Icon

		public static readonly DependencyProperty IconProperty =
			DependencyProperty.Register("Icon", typeof(ImageSource), typeof(ToolWindow),
			new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.AffectsRender));

		public ImageSource Icon
		{
			get
			{
				return (ImageSource)this.GetValue(ToolWindow.IconProperty);
			}
			set
			{
				this.SetValue(ToolWindow.IconProperty, value);
			}
		}

		# endregion

		# region // State

		//public static readonly DependencyProperty StateProperty = DependencyProperty.
		//    Register("State", typeof(ToolWindowState), typeof(ToolWindow),
		//    new FrameworkPropertyMetadata(ToolWindowState.Floating,
		//    new PropertyChangedCallback(ToolWindow.OnStateChanged)));

		//public ToolWindowState State
		//{
		//    get
		//    {
		//        return (ToolWindowState)this.GetValue(ToolWindow.StateProperty);
		//    }
		//    set
		//    {
		//        this.SetValue(ToolWindow.StateProperty, value);
		//    }
		//}

		//private static void OnStateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		//{
		//    ToolWindow window = (ToolWindow)d;			
		//    var args = new RoutedPropertyChangedEventArgs<ToolWindowState>(
		//        (ToolWindowState)e.OldValue, (ToolWindowState)e.NewValue, ToolWindow.StateChangedEvent);
		//    window.RaiseEvent(args);
		//}

		# endregion

		# region LeftStatusContent

		public static readonly DependencyProperty LeftStatusContentProperty =
			DependencyProperty.Register("LeftStatusContent", typeof(object), typeof(ToolWindow), new FrameworkPropertyMetadata(null));

		public object LeftStatusContent
		{
			get
			{
				return (object)this.GetValue(ToolWindow.LeftStatusContentProperty);
			}
			set
			{
				this.SetValue(ToolWindow.LeftStatusContentProperty, value);
			}
		}

		# endregion

		# region RightStatusContent

		public static readonly DependencyProperty RightStatusContentProperty =
			DependencyProperty.Register("RightStatusContent", typeof(object), typeof(ToolWindow), new FrameworkPropertyMetadata(null));

		public object RightStatusContent
		{
			get
			{
				return (object)this.GetValue(ToolWindow.RightStatusContentProperty);
			}
			set
			{
				this.SetValue(ToolWindow.RightStatusContentProperty, value);
			}
		}

		# endregion

		# region IsActive

		private static readonly DependencyPropertyKey IsActivePropertyKey =
			DependencyProperty.RegisterReadOnly("IsActive", typeof(bool),
			typeof(ToolWindow), new FrameworkPropertyMetadata(false));

		public static readonly DependencyProperty IsActiveProperty =
			ToolWindow.IsActivePropertyKey.DependencyProperty;

		public bool IsActive
		{
			get
			{
				return (bool)this.GetValue(ToolWindow.IsActiveProperty);
			}
		}

		# endregion

		# endregion

		# region CloseCommand

		private static void ExecutedCloseCommand(object sender, ExecutedRoutedEventArgs e)
		{
			ToolWindow window = (ToolWindow)sender;
			ToolWindowDockPanel panel = (ToolWindowDockPanel)window.Parent;

            //alterado
			//panel.Children.Remove(window);

			//window.ev.Set();
		}

		//public void CanExecuteCloseCommand(object sender, CanExecuteRoutedEventArgs e)
		//{
		//    e.CanExecute = true;
		//}

		# endregion

		# region Routed Events

		# region // StateChanged

		//public static readonly RoutedEvent StateChangedEvent = EventManager.
		//    RegisterRoutedEvent("StateChanged", RoutingStrategy.Bubble,
		//    typeof(RoutedPropertyChangedEventHandler<ToolWindowState>), typeof(ToolWindow));

		//public event RoutedPropertyChangedEventHandler<ToolWindowState> StateChanged
		//{
		//    add
		//    {
		//        base.AddHandler(ToolWindow.StateChangedEvent, value);
		//    }
		//    remove
		//    {
		//        base.RemoveHandler(ToolWindow.StateChangedEvent, value);
		//    }
		//}

		# endregion

		# region DragStarted

		public static readonly RoutedEvent DragStartedEvent = EventManager.
			RegisterRoutedEvent("DragStarted", RoutingStrategy.Bubble,
			typeof(DragStartedEventHandler), typeof(ToolWindow));

		public event DragStartedEventHandler DragStarted
		{
			add
			{
				base.AddHandler(ToolWindow.DragStartedEvent, value);
			}
			remove
			{
				base.RemoveHandler(ToolWindow.DragStartedEvent, value);
			}
		}

		# endregion

		# region DragDelta

		public static readonly RoutedEvent DragDeltaEvent = EventManager.
			RegisterRoutedEvent("DragDelta", RoutingStrategy.Bubble,
			typeof(DragDeltaEventHandler), typeof(ToolWindow));

		public event DragDeltaEventHandler DragDelta
		{
			add
			{
				base.AddHandler(ToolWindow.DragDeltaEvent, value);
			}
			remove
			{
				base.RemoveHandler(ToolWindow.DragDeltaEvent, value);
			}
		}

		# endregion

		# region DragCompleted

		public static readonly RoutedEvent DragCompletedEvent = EventManager.
			RegisterRoutedEvent("DragCompleted", RoutingStrategy.Bubble,
			typeof(DragCompletedEventHandler), typeof(ToolWindow));

		public event DragCompletedEventHandler DragCompleted
		{
			add
			{
				base.AddHandler(ToolWindow.DragCompletedEvent, value);
			}
			remove
			{
				base.RemoveHandler(ToolWindow.DragCompletedEvent, value);
			}
		}

		# endregion

		# region BringtoFront

		public void BringtoFront()
		{
			this.Parent.BringElementToFront(this);
		}

		# endregion

		# region Activated

		protected virtual void OnActivated()
		{
			if (!(bool)this.GetValue(ToolWindow.IsActiveProperty))
			{
				this.SetValue(ToolWindow.IsActivePropertyKey, true);
				this.BringtoFront();
				RoutedEventArgs e = new RoutedEventArgs(ToolWindow.ActivatedEvent, this);
				base.RaiseEvent(e);
			}
		}

		public static readonly RoutedEvent ActivatedEvent = EventManager.
			RegisterRoutedEvent("Activated", RoutingStrategy.Bubble,
			typeof(RoutedEventHandler), typeof(ToolWindow));

		public event RoutedEventHandler Activated
		{
			add
			{
				base.AddHandler(ToolWindow.ActivatedEvent, value);
			}
			remove
			{
				base.RemoveHandler(ToolWindow.ActivatedEvent, value);
			}
		}

		# endregion

		# region Deactivated

		protected virtual void OnDeactivated()
		{
			this.SetValue(ToolWindow.IsActivePropertyKey, false);

			RoutedEventArgs e = new RoutedEventArgs(ToolWindow.DeactivatedEvent, this);
			base.RaiseEvent(e);
		}

		public static readonly RoutedEvent DeactivatedEvent = EventManager.
			RegisterRoutedEvent("Deactivated", RoutingStrategy.Bubble,
			typeof(RoutedEventHandler), typeof(ToolWindow));

		public event RoutedEventHandler Deactivated
		{
			add
			{
				base.AddHandler(ToolWindow.DeactivatedEvent, value);
			}
			remove
			{
				base.RemoveHandler(ToolWindow.DeactivatedEvent, value);
			}
		}

		# endregion

		# endregion

		# region ToolWindow_Activated

		void ToolWindow_Activated(object sender, RoutedEventArgs e)
		{
			if (sender != this)
			{
				this.OnDeactivated();
			}
		}

		# endregion

		# region OnGotKeyboardFocus

		protected override void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e)
		{
			base.OnGotKeyboardFocus(e);
			this.OnActivated();
		}

		# endregion

		# region OnPreviewMouseDown

		protected override void OnPreviewMouseDown(MouseButtonEventArgs e)
		{
			base.OnPreviewMouseDown(e);
			this.OnActivated();
		}

		# endregion

		# region MeasureOverride

		protected override Size MeasureOverride(Size constraint)
		{
			return base.MeasureOverride(constraint);
		}

		# endregion

		# region DragOrResizeStatus Enum

		private struct DragOrResizeStatus
		{
			private byte _Value;

			const byte _TopLeft = 9;
			const byte _TopCenter = 10;
			const byte _TopRight = 12;
			const byte _MiddleLeft = 17;
			const byte _Drag = 18;
			const byte _MiddleRight = 20;
			const byte _BottomLeft = 33;
			const byte _BottomCenter = 34;
			const byte _BottomRight = 36;

			const byte _Left = 1;
			const byte _HMiddle = 2;
			const byte _Right = 4;
			const byte _Top = 8;
			const byte _VCenter = 16;
			const byte _Bottom = 32;

			public static DragOrResizeStatus None = new DragOrResizeStatus { _Value = 0 };
			public static DragOrResizeStatus TopLeft = new DragOrResizeStatus { _Value = _TopLeft };
			public static DragOrResizeStatus TopCenter = new DragOrResizeStatus { _Value = _TopCenter };
			public static DragOrResizeStatus TopRight = new DragOrResizeStatus { _Value = _TopRight };
			public static DragOrResizeStatus MiddleLeft = new DragOrResizeStatus { _Value = _MiddleLeft };
			public static DragOrResizeStatus Drag = new DragOrResizeStatus { _Value = _Drag };
			public static DragOrResizeStatus MiddleRight = new DragOrResizeStatus { _Value = _MiddleRight };
			public static DragOrResizeStatus BottomLeft = new DragOrResizeStatus { _Value = _BottomLeft };
			public static DragOrResizeStatus BottomCenter = new DragOrResizeStatus { _Value = _BottomCenter };
			public static DragOrResizeStatus BottomRight = new DragOrResizeStatus { _Value = _BottomRight };

			public bool IsOnLeft { get { return (this._Value & _Left) == _Left; } }
			public bool IsOnHMiddle { get { return (this._Value & _HMiddle) == _HMiddle; } }
			public bool IsOnRight { get { return (this._Value & _Right) == _Right; } }
			public bool IsOnTop { get { return (this._Value & _Top) == _Top; } }
			public bool IsOnVCenter { get { return (this._Value & _VCenter) == _VCenter; } }
			public bool IsOnBottom { get { return (this._Value & _Bottom) == _Bottom; } }
			public bool IsOnTopLeftOrBottomRight { get { return this._Value == _TopLeft || this._Value == _BottomRight; } }
			public bool IsOnTopRightOrBottomLeft { get { return this._Value == _TopRight || this._Value == _BottomLeft; } }
			public bool IsOnTopCenterOrBottomCenter { get { return this._Value == _TopCenter || this._Value == _BottomCenter; } }
			public bool IsOnMiddleLeftOrMiddleRight { get { return this._Value == _MiddleLeft || this._Value == _MiddleRight; } }

			public override bool Equals(object obj)
			{
				if (obj == null || this.GetType() != obj.GetType())
				{
					return false;
				}

				return ((DragOrResizeStatus)obj)._Value == this._Value;
			}

			public override int GetHashCode()
			{
				return this._Value.GetHashCode();
			}

			public static bool operator ==(DragOrResizeStatus x, DragOrResizeStatus y)
			{
				return x.Equals(y);
			}

			public static bool operator !=(DragOrResizeStatus x, DragOrResizeStatus y)
			{
				return !x.Equals(y);
			}
		}

		# endregion

		# region Drag and Resize

		# region OnApplyTemplate

		public override void OnApplyTemplate()
		{
			base.OnApplyTemplate();

			this._PART_Dragger_Element = this.GetTemplateChild(ToolWindow.PART_Dragger) as UIElement;
			this._PART_ResizeGrip_Element = this.GetTemplateChild(ToolWindow.PART_ResizeGrip) as ResizeGrip;
		}

		# endregion

		# region GetDragOrResizeMode

		private DragOrResizeStatus GetDragOrResizeMode(Point position)
		{
			int resizeSideThichness = 4;
			int resizeCornerSize = 12;

			DragOrResizeStatus stat = DragOrResizeStatus.None;

			if (position.X <= resizeSideThichness) // left
			{
				if (position.Y <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.TopLeft;
				}
				else if (this.ActualHeight - position.Y <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.BottomLeft;
				}
				else
				{
					stat = DragOrResizeStatus.MiddleLeft;
				}
			}
			else if (this.ActualWidth - position.X <= resizeSideThichness) // right
			{
				if (position.Y <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.TopRight;
				}
				else if (this.ActualHeight - position.Y <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.BottomRight;
				}
				else
				{
					stat = DragOrResizeStatus.MiddleRight;
				}
			}
			else if (position.Y <= resizeSideThichness) // top
			{
				if (position.X <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.TopLeft;
				}
				else if (this.ActualWidth - position.X <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.TopRight;
				}
				else
				{
					stat = DragOrResizeStatus.TopCenter;
				}
			}
			else if (this.ActualHeight - position.Y <= resizeSideThichness) // bottom
			{
				if (position.X <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.BottomLeft;
				}
				else if (this.ActualWidth - position.X <= resizeCornerSize)
				{
					stat = DragOrResizeStatus.BottomRight;
				}
				else
				{
					stat = DragOrResizeStatus.BottomCenter;
				}
			}
			else if (this._PART_Dragger_Element != null &&
				this._PART_Dragger_Element.IsMouseOver)
			{
				stat = DragOrResizeStatus.Drag;
			}
			else if (this._PART_ResizeGrip_Element != null &&
				this._PART_ResizeGrip_Element.IsMouseOver)
			{
				stat = DragOrResizeStatus.BottomRight;
			}

			return stat;
		}

		# endregion

		# region CancelDragOrResize

		private void CancelDragOrResize()
		{
			this.Cursor = Cursors.Arrow;
			//if (e.MouseDevice.Captured == this)
			//{
			this.ReleaseMouseCapture();
			//}
			this._DragOrResizeStatus = DragOrResizeStatus.None;
			//this._StartMousePosition.X = 0;
			//this._StartMousePosition.Y = 0;

		}

		# endregion

		# region SetResizeCursor

		private void SetResizeCursor(DragOrResizeStatus resizeStatus)
		{
			if (resizeStatus.IsOnTopLeftOrBottomRight)
			{
				this.Cursor = Cursors.SizeNWSE;
			}
			else if (resizeStatus.IsOnTopRightOrBottomLeft)
			{
				this.Cursor = Cursors.SizeNESW;
			}
			else if (resizeStatus.IsOnTopRightOrBottomLeft)
			{
				this.Cursor = Cursors.SizeNESW;
			}
			else if (resizeStatus.IsOnTopCenterOrBottomCenter)
			{
				this.Cursor = Cursors.SizeNS;
			}
			else if (resizeStatus.IsOnMiddleLeftOrMiddleRight)
			{
				this.Cursor = Cursors.SizeWE;
			}
			else
			{
				this.Cursor = Cursors.Arrow;
			}
		}

		# endregion

		# region AdjustBounds

		private void AdjustBounds(Point actualPosition)
		{
			System.Windows.
			Thickness margin = new Thickness(this.Margin.Left, this.Margin.Top, this.Margin.Right, this.Margin.Bottom);
			Size size = this.RenderSize;

			Vector changeFromStart = Point.Subtract(actualPosition, this._StartMousePosition);
			Vector changeFromPrevious = Point.Subtract(actualPosition, this._PreviousMousePosition);

			if (this._DragOrResizeStatus == DragOrResizeStatus.Drag)
			{
				margin.Left += changeFromStart.X;
				margin.Top += changeFromStart.Y;
			}
			else
			{
				if (this._DragOrResizeStatus.IsOnRight)
				{
					if (size.Width + changeFromPrevious.X > this.MinWidth)
					{
						size.Width += changeFromPrevious.X;
					}
				}
				else if (this._DragOrResizeStatus.IsOnLeft)
				{
					if (size.Width - changeFromStart.X > this.MinWidth)
					{
						margin.Left += changeFromStart.X;
						size.Width -= changeFromStart.X;
					}
				}

				if (this._DragOrResizeStatus.IsOnBottom)
				{
					if (size.Height + changeFromPrevious.Y > this.MinHeight)
					{
						size.Height += changeFromPrevious.Y;
					}
				}
				else if (this._DragOrResizeStatus.IsOnTop)
				{
					if (size.Height - changeFromStart.Y > this.MinHeight)
					{
						margin.Top += changeFromStart.Y;
						size.Height -= changeFromStart.Y;
					}
				}
			}

			this.Margin = margin;
			this.Width = size.Width;
			this.Height = size.Height;
		}

		# endregion

		# region OnMouseLeftButtonDown

		protected override void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e)
		{
			if (this._DragOrResizeStatus == DragOrResizeStatus.None)
			{
				if (this._PreviewDragOrResizeStatus != DragOrResizeStatus.None)
				{
					e.Handled = true;
					this._DragOrResizeStatus = this._PreviewDragOrResizeStatus;
					this._StartMousePosition = this._PreviousMousePosition = e.GetPosition(this);
					this.Focus();
					this.CaptureMouse();

				}

				//bool errorOccurred = true;

				//try
				//{
				//    DragStartedEventArgs args = new DragStartedEventArgs(this._OriginWindowPoint.X, this._OriginWindowPoint.Y);
				//    args.RoutedEvent = ChildWindow.DragStartedEvent;
				//    this.RaiseEvent(args);
				//    errorOccurred = false;
				//}
				//finally
				//{
				//    if (errorOccurred)
				//    {
				//        this.CancelDrag();
				//    }
				//}
			}
			base.OnMouseLeftButtonDown(e);
		}

		# endregion

		# region OnMouseMove

		protected override void OnMouseMove(System.Windows.Input.MouseEventArgs e)
		{
			base.OnMouseMove(e);

			Point point = e.GetPosition(this);

			if (this._DragOrResizeStatus == DragOrResizeStatus.None)
			{
				Rect rect = new Rect(new Point(), this.RenderSize);

				if (!rect.Contains(point)) // modal mouse capture
				{
					this.Cursor = Cursors.Arrow;
					this._PreviewDragOrResizeStatus = DragOrResizeStatus.None;
				}
				else
				{
					this._PreviewDragOrResizeStatus = this.GetDragOrResizeMode(point);

					this.SetResizeCursor(this._PreviewDragOrResizeStatus);
				}
			}
			else
			{
				if (e.MouseDevice.LeftButton == MouseButtonState.Pressed)
				{
					if (point != this._PreviousMousePosition)
					{
						e.Handled = true;

						//DragDeltaEventArgs args = new DragDeltaEventArgs(
						//    point.X - this._OriginWindowPoint.X, point.Y - this._OriginWindowPoint.Y);
						//args.RoutedEvent = ChildWindow.DragDeltaEvent;
						//this.RaiseEvent(args);

						this.AdjustBounds(point);

						this._PreviousMousePosition = point;
					}
				}
				else
				{
					this.CancelDragOrResize();
				}
			}
		}

		# endregion

		# region // OnMouseLeave

		//protected override void OnMouseLeave(MouseEventArgs e)
		//{
		//    base.OnMouseLeave(e);

		//    this.Cursor = Cursors.Arrow;
		//}

		# endregion

		# region OnMouseLeftButtonUp

		protected override void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e)
		{
			if (this.IsMouseCaptured && this._DragOrResizeStatus != DragOrResizeStatus.None)
			{
				e.Handled = true;
				this.CancelDragOrResize();

				//Point point = e.MouseDevice.GetPosition(this._PART_Move_Element);

				//DragCompletedEventArgs args = new DragCompletedEventArgs(
				//    //point.X - this._OriginScreenCoordPosition.X, point.Y - this._OriginScreenCoordPosition.Y, false);
				//    point.X - this._OriginWindowPoint.X, point.Y - this._OriginWindowPoint.Y, false);
				//args.RoutedEvent = ChildWindow.DragCompletedEvent;
				//this.RaiseEvent(args);
			}
			base.OnMouseLeftButtonUp(e);
		}

		# endregion

		# endregion

		# region // Show[Dialog]

		//private AutoResetEvent ev = new AutoResetEvent(false);

		//public void Show()
		//{
		//    this.InternalShow(null);
		//}
		//public bool? ShowDialog()
		//{
		//    return this.InternalShow(ToolWindowModal.Application);
		//}
		//public void ShowDialog(ToolWindowDockPanel panel)//, ToolWindowModal modal)
		//{
		//    this.InternalShow(panel);
		//}
		//private void InternalShow(ToolWindowDockPanel panel)//, ToolWindowModal? modal)
		//{
		//    //if (this.Parent == null)
		//    //{
		//    //    throw new InvalidOperationException(
		//    //        "The ToolWindow must be joined with a ToolWindowDockPanel.\r\n" +
		//    //        "Set the \"Parent\" property.");
		//    //}

		
		//}


		# endregion

		# region FromPage

		public static ToolWindow FromPage(Page page)
		{
			ToolWindow window = new ToolWindow();
			Frame frame = new Frame();
			frame.Content = page;
			window.Content = frame;
			window.Header = page.Title;
			window.Width = page.Width;
			window.Height = page.Height;
			return window;
		}

		# endregion
	}
}
